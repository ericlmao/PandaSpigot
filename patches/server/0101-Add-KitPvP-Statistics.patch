From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Eric <negggative@gmail.com>
Date: Fri, 15 Mar 2024 21:09:15 -0300
Subject: [PATCH] Add KitPvP Statistics


diff --git a/src/main/java/games/negative/kitpvp/KitPvPDataImpl.java b/src/main/java/games/negative/kitpvp/KitPvPDataImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..46867549af7f5cd26364617ff2819f863bea2d02
--- /dev/null
+++ b/src/main/java/games/negative/kitpvp/KitPvPDataImpl.java
@@ -0,0 +1,82 @@
+package games.negative.kitpvp;
+
+import com.avaje.ebean.validation.NotNull;
+import games.negative.kitpvp.api.KitPvPData;
+import net.minecraft.server.NBTTagCompound;
+
+public class KitPvPDataImpl implements KitPvPData {
+
+    private int kills = 0;
+    private int deaths = 0;
+    private long balance = 0;
+    private int killStreak = 0;
+    private int bestKillStreak = 0;
+
+    public KitPvPDataImpl(NBTTagCompound data) {
+        this.kills = data.getInt("kills");
+        this.deaths = data.getInt("deaths");
+        this.balance = data.getLong("balance");
+        this.killStreak = data.getInt("kill-streak");
+        this.bestKillStreak = data.getInt("best-kill-streak");
+    }
+
+    public KitPvPDataImpl() {
+    }
+
+    @Override
+    public int getKills() {
+        return this.kills;
+    }
+
+    @Override
+    public void setKills(int kills) {
+        this.kills = kills;
+    }
+
+    @Override
+    public int getDeaths() {
+        return this.deaths;
+    }
+
+    @Override
+    public void setDeaths(int deaths) {
+        this.deaths = deaths;
+    }
+
+    @Override
+    public long getBalance() {
+        return this.balance;
+    }
+
+    @Override
+    public void setBalance(long balance) {
+        this.balance = balance;
+    }
+
+    @Override
+    public int getKillStreak() {
+        return this.killStreak;
+    }
+
+    @Override
+    public void setKillStreak(int killStreak) {
+        this.killStreak = killStreak;
+
+        if (killStreak > bestKillStreak) bestKillStreak = killStreak;
+    }
+
+    @Override
+    public void addKillStreak(int amount) {
+        setKillStreak(getKillStreak() + amount);
+    }
+
+    @Override
+    public int getBestKillStreak() {
+        return this.bestKillStreak;
+    }
+
+    @Override
+    public void setBestKillStreak(int bestKillStreak) {
+        this.bestKillStreak = bestKillStreak;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 45217866bba8f7b8e065da7eca78776f1441dba9..8014c1e6828d89cb35ae1d048525f85edeb202d1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -1,38 +1,35 @@
 package org.bukkit.craftbukkit;
 
 import com.mojang.authlib.GameProfile;
-import java.io.File;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-
-import net.minecraft.server.EntityPlayer;
+import games.negative.kitpvp.KitPvPDataImpl;
+import games.negative.kitpvp.api.KitPvPData;
 import net.minecraft.server.NBTTagCompound;
 import net.minecraft.server.WorldNBTStorage;
-
-import org.bukkit.BanList;
-import org.bukkit.Bukkit;
-import org.bukkit.Location;
-import org.bukkit.OfflinePlayer;
-import org.bukkit.Server;
+import org.bukkit.*;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.entity.Player;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 
+import java.io.File;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable {
     private final GameProfile profile;
     private final CraftServer server;
     private final WorldNBTStorage storage;
+    private final KitPvPData kitPvPData;
 
     protected CraftOfflinePlayer(CraftServer server, GameProfile profile) {
         this.server = server;
         this.profile = profile;
         this.storage = (WorldNBTStorage) (server.console.worlds.get(0).getDataManager());
-
+        this.kitPvPData = loadKitPvPData();
     }
 
     public GameProfile getProfile() {
@@ -243,6 +240,20 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return null;
     }
 
+    @Override
+    public KitPvPData getKitPvPData() {
+        return kitPvPData;
+    }
+
+    private KitPvPData loadKitPvPData() {
+        NBTTagCompound data = getData();
+
+        if (data == null || !data.hasKey("kitpvp")) return new KitPvPDataImpl();
+
+        NBTTagCompound nbt = data.getCompound("kitpvp");
+        return new KitPvPDataImpl(nbt);
+    }
+
     public void setMetadata(String metadataKey, MetadataValue metadataValue) {
         server.getPlayerMetadata().setMetadata(this, metadataKey, metadataValue);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 5dfacdde9d5702ed17c25980329803e57f1fb65a..583fa67cfc9faec75e281bec7a6eee5e9168dc64 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.authlib.GameProfile;
+import games.negative.kitpvp.KitPvPDataImpl;
+import games.negative.kitpvp.api.KitPvPData;
 import io.netty.buffer.Unpooled;
 
 import java.io.ByteArrayOutputStream;
@@ -80,6 +82,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private double health = 20;
     private boolean scaledHealth = false;
     private double healthScale = 20;
+    private KitPvPData kitPvPData = new KitPvPDataImpl();
 
     public CraftPlayer(CraftServer server, EntityPlayer entity) {
         super(server, entity);
@@ -950,6 +953,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return null;
     }
 
+    @Override
+    public KitPvPData getKitPvPData() {
+        return kitPvPData;
+    }
+
     @Override
     public void setBedSpawnLocation(Location location) {
         setBedSpawnLocation(location, false);
@@ -1161,6 +1169,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 handle.keepLevel = data.getBoolean("keepLevel");
             }
         }
+
+        if (nbttagcompound.hasKey("kitpvp")) {
+            NBTTagCompound data = nbttagcompound.getCompound("kitpvp");
+            this.kitPvPData = new KitPvPDataImpl(data);
+        }
     }
 
     public void setExtraData(NBTTagCompound nbttagcompound) {
@@ -1178,6 +1191,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         data.setLong("firstPlayed", getFirstPlayed());
         data.setLong("lastPlayed", System.currentTimeMillis());
         data.setString("lastKnownName", handle.getName());
+
+        if (!nbttagcompound.hasKey("kitpvp")) {
+            nbttagcompound.set("kitpvp", new NBTTagCompound());
+        }
+
+        NBTTagCompound kitpvp = nbttagcompound.getCompound("kitpvp");
+        kitpvp.setInt("kills", kitPvPData.getKills());
+        kitpvp.setInt("deaths", kitPvPData.getDeaths());
+        kitpvp.setLong("balance", kitPvPData.getBalance());
+        kitpvp.setInt("kill-streak", kitPvPData.getKillStreak());
+        kitpvp.setInt("best-kill-streak", kitPvPData.getBestKillStreak());
     }
 
     @Override
